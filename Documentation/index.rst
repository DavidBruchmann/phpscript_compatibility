# PHP_SCRIPT Configuration Parameters

Content of this file is copied from old documentation (TYPO3 v4.7.20) and might be outdated.
What might be interesting nevertheless are the reasons why PHP_SCRIPT and the variations have been banned from TYPO3. Below the chapter "Good to know" gives some clues about it.

## PHP_SCRIPT.file

File that will be included. This file must be valid PHP-code! It's included with "include()";

Directions:

 1. All content must be put into $content. No output must be echo'ed out!

 2. Call $GLOBALS["TSFE"]->set_no_cache(), if you want to disable caching of the page. Set this during development! And set it, if the content you create may not be cached.

   NOTE: If you have a parsing error in your include script the $GLOBALS["TSFE"]->set_no_cache() function is NOT executed and thereby does not disable caching. Upon a parse-error you must manually clear the page-cache after you have corrected your error!
 3. the array $conf contains the configuration for the PHP_SCRIPT cObject. Try debug($conf) to see the content printed out for debugging!
   See later in this manual for an introduction to writing your own PHP include-scripts.


## PHP_SCRIPT_EXT

### file

File that will be included. This file must be valid PHP-code! It's included with "include()";

Purpose:
This works like PHP_SCRIPT_INT, because a divider string is also inserted in the content for this kind of include-script. But the difference is that the content is divided as the very last thing before it's output to the browser.
This basically means that PHP_SCRIPT_EXT (external, because it's included in the global space in index_ts.php file!!) can output data directly with echo-statements!
This is a very "raw" version of PHP_SCRIPT because it's not included from inside an object and you have only very few standard functions from TYPO3 to call.
This is the fastest option of all three PHP_SCRIPT-cObjects, because the page-data is all cached and your dynamic content is generated by a raw php-script

Rules:
 * All content can be either 1) echo'ed out directly, or 2) returned in $content.
 * calls to $GLOBALS["TSFE"]->set_no_cache() and $GLOBALS["TSFE"]->set_cache_timeout_default() makes no sense in this situation.
 * parsing errors does not interfere with caching
 * In the global name-space, the array $REC contains the current record when the file was "inserted" on the page, and $CONF-array contains the configuration for the script.
 * Don't mess with the global vars named $EXTiS_*

### includeLibs

This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.


## PHP_SCRIPT_INC

### file

File that will be included. This file must be valid PHP-code! It's included with "include()";

Purpose:
This basically works like PHP_SCRIPT. But the vital difference is that inserting a PHP_SCRIPT_INT (internal opposed to external, see below) merely inserts a divider-string in the code and then serializes the current cObj and puts it in the $GLOBALS["TSFE"]->config["INTincScript"]-array. This array is saved with the cached page-content.
Now, the point is, that including a script like this lets you avoid disabling pagecaching. The reason is that the cached page contains the divider string and when a "static" page is fetched from cache, it's divided by that string and the dynamic content object is inserted.
This is the compromise option of all three PHP_SCRIPT-cObjects, because the page-data is all cached, but still the pagegen.php script is included, which initializes all the classes, objects and so. What you gain here is an environment for your script almost exactly the same as PHP_SCRIPT because your script is called from inside a class tslib_cObj object. You can work with all functions of the tslib_cObj-class. But still all the "static" pagecontent is only generated once, cached and only your script is dynamically rendered.

Rules:

 * calls to $GLOBALS["TSFE"]->set_no_cache() and $GLOBALS["TSFE"]->set_cache_timeout_default() makes no sense in this situation.
 * parsing errors does not interfere with caching
 * Be aware that certain global variables may not be set as usual and be available as usual when working in this mode. Most scripts should work out-of-the-box with this option though.
 * Dependence and use of LOAD_REGISTER is fragile because the PHP_SCRIPT_INT is not rendered until after the cached content and due to this changed order of events, use of LOAD_REGISTER may not work.
 * You can not nest PHP_SCRIPT_INT and PHP_SCRIPT_EXT in PHP_SCRIPT_INT. You may nest PHP_SCRIPT cObjects though.

### includeLibs

This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.

# Good to know

## config.enableContentLengthHeader

If set, a header "content-length: [bytes of content]" is sent.

If a PHP_SCRIPT_EXT object is detected on the page or if the Backend user is logged in, this is disabled. The reason is that the content length header cannot include the lenght of these objects and the content-length will cut of the lenght of the document in some browsers.

## COA_INT.includeLibs

list of resources/stdWrap
(This property is used only if the object is COA_INT!, See introduction.)
This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.

## USER.includeLibs

This property applies only if the object is created as USER_INT)
This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.

## USER_INT.includeLibs

This property applies only if the object is created as USER_INT)
This is a comma-separated list of resources that are included as PHP-scripts (with include_once() function) if this script is included.
This is possible to do because any include-files will be known before the scripts are included. That's not the case with the regular PHP_SCRIPT cObject.

## stdWrap.postUserFuncInt

Calling a PHP-function or method in a class, passing the current content to the function as first parameter and any properties as second parameter. The result will be rendered non-cached, outside the main page-rendering. Please see the description of the cObject USER_INT and PHP_SCRIPT_INT for in-depth information.
